type @test = string

model M = {
  a: map[string]string,
}

static function helloIf(): void {
  if (true) {
  }

  if (true) {

  } else if (true) {

  } else {

  }
}

async function helloAsync() : void {
  var test = @test;
  @test = 'test';
  helloSync(@test);
  helloDeclare(@test);
}

function helloSync(test: string) : void {
  var str = test;
}

static function helloThrow() throws : void {
  throw {};
}

static function helloForBreak() : void {
  for (var item : []) {
    break;
  }
}

static function helloWhile() : void {
  while (true) {
    break;
  }
}

static function helloDeclare(test: string) : string {
  var hello = "world";
  var helloNull: string = null;
  hello = "hehe";
  return test;
}

static function trycatch() throws : void {
  try {
    var a = 'test';
  } catch (error) {
    var b = 'test';
    var e = error;
  } finally {
    var c = 'test';
  }
}

init();

api hello(body: string): void {
  __request.method = 'GET';
  __request.pathname = '/';
  __request.headers = {
    host = 'www.test.com',
  };
  __request.body = 'test';
  var test: string = null;
  __request.body = test;
  __request.body = body;
  if (true) {
    __request.headers.host = 'www.test2.com';
  }
} returns {
  if (true) {
    retry;
  } else {
    true;
  }

  helloIf();
  !false;

  var a: string = null;
  a = 'string';

  return;
}
